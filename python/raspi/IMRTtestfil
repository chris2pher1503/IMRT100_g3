#!/usr/bin/env python
# coding: utf-8

# Import some modules that we need
import imrt_robot_serial
import time
import sys

LEFT = -1
RIGHT = 1
FORWARDS = 1
BACKWARDS = -1
DRIVING_SPEED = 150
TURNING_SPEED = 150
STOP_DISTANCE = 15

def stop_robot(duration):
    motor_serial.send_command(0, 0)
    time.sleep(duration)

def drive_robot(speed_motor_1, speed_motor_2, duration):
    motor_serial.send_command(speed_motor_1, speed_motor_2)
    time.sleep(duration)

def drive_turn(direction, duration):
    speed = DRIVING_SPEED * direction
    motor_serial.send_command(speed, speed)
    time.sleep(duration)

def turn_robot(direction, duration):
    iteration = int(duration * 10)
    for i in range(iteration):
        motor_serial.send_command(TURNING_SPEED * direction, -TURNING_SPEED * direction)
        time.sleep(0.1)

# We want our program to send commands at 10 Hz (10 commands per second)
execution_frequency = 100 #Hz
execution_period = 1. / execution_frequency #seconds

# Create motor serial object
motor_serial = imrt_robot_serial.IMRTRobotSerial()

# Open serial port. Exit if serial port cannot be opened
try:
    motor_serial.connect("/dev/ttyACM0")
except:
    print("Could not open port. Is your robot connected?\nExiting program")
    sys.exit()

# Start serial receive thread
motor_serial.run()

# Enter the main loop
print("Entering loop. Ctrl+c to terminate")
while not motor_serial.shutdown_now:
    # Get and print readings from distance sensors
    dist_right = motor_serial.get_dist_4()
    dist_left = motor_serial.get_dist_2()
    dist_front1 = motor_serial.get_dist_3()
    dist_front2 = motor_serial.get_dist_1()

    print("Dist right:", dist_right, "   Dist left:", dist_left, "   Dist front1:", dist_front1, "   Dist front2:", dist_front2)

    # Check frontal sensors for close obstacles
    if dist_front1 < STOP_DISTANCE or dist_front2 < STOP_DISTANCE:
        if dist_left < STOP_DISTANCE and dist_right < STOP_DISTANCE:
            turn_robot(RIGHT, 1.2) # U-turn
        elif dist_left < STOP_DISTANCE:
            turn_robot(RIGHT, 0.6)
        else:
            turn_robot(LEFT, 0.6)

    # Wall-following behavior
    elif dist_front1 > 60 and dist_front2 > 60: 
        if dist_left > 70 and dist_right < 70: 
            drive_robot(dist_front1 * 0.9, dist_front2, 0.0005)
        elif dist_right > 70 and dist_left < 70:
            drive_robot(dist_front1, dist_front2 * 0.9, 0.0005)
        else:
            drive_robot(dist_front1, dist_front2, 0.0005)
    else:
        # Default behavior: just drive forward.
        drive_robot(dist_front1, dist_front2, 0.0005)

print("Goodbye")
